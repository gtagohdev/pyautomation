#!/usr/bin/env python3

import json
import locale
import sys
import operator
import emails
import reports
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales_by_model = []
  max_sales_by_year = {}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    car = item['car']
    max_sales_by_model.append([car, item['total_sales']])
    # TODO: also handle most popular car_year
    caryear = item['car']['car_year']
    max_sales_by_year[caryear] = max_sales_by_year.get(caryear, 0) + item['total_sales']

  sorted_sales_model = sorted(max_sales_by_model, reverse=True, key=lambda x:x[1])
  sorted_sales_year = sorted(max_sales_by_year.items(), reverse=True, key=operator.itemgetter(1))
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(sorted_sales_model[0][0]), sorted_sales_model[0][1]),
    "The most popular year was {} with {} sales.".format(sorted_sales_year[0][0], sorted_sales_year[0][1])
    ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  report_info = '{}<br/>{}<br/>{}'.format(summary[0], summary[1], summary[2])
  car_data = cars_dict_to_table(data)
  reports.generate('/tmp/cars.pdf', 'Sales summary for last month', report_info, car_data)

  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "{}\n{}\n{}\n".format(summary[0], summary[1], summary[2])

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)

